package com.capitalistspz.entityspecificinvulnerability.command;

import com.capitalistspz.entityspecificinvulnerability.EntitySpecificInvulnerability;
import com.capitalistspz.entityspecificinvulnerability.mixininterfaces.IInvulnerableToType;
import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.BoolArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.suggestion.SuggestionProvider;
import net.minecraft.command.CommandSource;
import net.minecraft.command.argument.EntityArgumentType;
import net.minecraft.entity.Entity;
import net.minecraft.entity.damage.DamageSource;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.text.Text;

import java.util.Collection;

import static net.minecraft.server.command.CommandManager.argument;
import static net.minecraft.server.command.CommandManager.literal;

public class DamageInvulnerabilityCommand {

    public static final SuggestionProvider<ServerCommandSource> SUGGESTION_PROVIDER = (context, builder)
            -> CommandSource.suggestMatching(EntitySpecificInvulnerability.DamageTypes, builder);
    public static void register(CommandDispatcher<ServerCommandSource> dispatcher){

        var lab = literal("dmginvuln")
                .requires(src -> src.hasPermissionLevel(2))
                .then(argument("entities", EntityArgumentType.entities())
                        .then(literal("set")
                                .then(argument("damage_type", StringArgumentType.string())
                                        .suggests(SUGGESTION_PROVIDER)
                                        .then(argument("invulnerable", BoolArgumentType.bool())
                                                .executes(cmd -> executeSetInvulnerable(cmd.getSource(), EntityArgumentType.getEntities(cmd, "entities"), StringArgumentType.getString(cmd, "damage_type"), BoolArgumentType.getBool(cmd, "invulnerable"))))))
                        .then(literal("get")
                                .then(argument("damage_type", StringArgumentType.string())
                                        .suggests(SUGGESTION_PROVIDER)
                                        .executes(cmd -> executeGetInvulnerable(cmd.getSource(), EntityArgumentType.getEntities(cmd, "entities"), StringArgumentType.getString(cmd, "damage_type"))))));
        dispatcher.register(lab);
    }
    static int executeSetInvulnerable(ServerCommandSource src, Collection<? extends Entity> entities, String damageSourceId, boolean invulnerable){
        int successful = 0;
        int entityCount = entities.size();
        Entity sole = null;
        for (var entity : entities){
            var invulnerableType = (IInvulnerableToType)entity;
            if (invulnerableType.setInvulnerableToDamageType(damageSourceId, invulnerable)){
                successful = 1;
            }
            if (sole == null){
                sole = entity;
            }
        }
        if (entityCount != 1){
            var text = Text.literal("Modified %s entities invulnerability to %s".formatted(entityCount, damageSourceId));
            src.sendFeedback(text, true);

            return entityCount;
        }
        else if (successful == 0) {
            src.sendFeedback(Text.literal("Unable to modify entity invulnerability to %s".formatted(damageSourceId)), false);
        }
        else {
            src.sendFeedback(Text.literal("Modified %s's invulnerability to %s".formatted(sole.getName().getString(), damageSourceId)), true);
        }

        return successful;

    }



    static int executeGetInvulnerable(ServerCommandSource src, Collection<? extends Entity> entities, String damageSourceId){
        int successful = 0;

        if (entities.size() == 0){
            return 0;
        }
        for (var entity : entities){
            if (entity.isInvulnerableTo(new DamageSource(damageSourceId))) {
                successful += 1;
            }
        }
        if (entities.size() > 1){
            var text = Text.of("%d selected entities are invulnerable to %s".formatted(successful, damageSourceId));
            src.sendFeedback(text, false);
        }

        else {
            Text text;
            if (successful == 0){
                text = Text.of("%s is not invulnerable to %s".formatted(entities.iterator().next().getName().getString(), damageSourceId));
            }
            else {
                text = Text.of("%s is invulnerable to %s".formatted(entities.iterator().next().getName().getString(), damageSourceId));
            }
            src.sendFeedback(text, false);
        }
        return successful;
    }
}
