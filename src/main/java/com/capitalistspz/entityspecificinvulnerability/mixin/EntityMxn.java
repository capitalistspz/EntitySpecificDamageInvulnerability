package com.capitalistspz.entityspecificinvulnerability.mixin;

import com.capitalistspz.entityspecificinvulnerability.mixininterfaces.IInvulnerableToType;
import net.minecraft.entity.Entity;
import net.minecraft.entity.damage.DamageSource;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtElement;
import net.minecraft.nbt.NbtList;
import net.minecraft.nbt.NbtString;
import net.minecraft.world.entity.EntityLike;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

import java.util.HashSet;

@Mixin(Entity.class)
public abstract class EntityMxn implements EntityLike, IInvulnerableToType {
    private static final String InvulnerableToNbtTag = "InvulnerableTo";
    HashSet<String> invulnerableTypes = new HashSet<>();

    @Override
    public boolean setInvulnerableToDamageType(String damageSourceId, boolean invulnerable) {
        if (invulnerable){
            return invulnerableTypes.add(damageSourceId);
        }
        else {
            return invulnerableTypes.remove(damageSourceId);
        }
    }
    @Inject(method="writeNbt", at=@At(value="INVOKE", target = "Lnet/minecraft/entity/Entity;writeCustomDataToNbt(Lnet/minecraft/nbt/NbtCompound;)V"))
    void writeInvulnerableTypesToNbt(NbtCompound nbt, CallbackInfoReturnable<NbtCompound> cir){
        var nbtList = new NbtList();
        for (var dmg : invulnerableTypes){
            nbtList.add(NbtString.of(dmg));
        }
        nbt.put(InvulnerableToNbtTag, nbtList);

    }

    @Inject(method="readNbt", at=@At(value="INVOKE", target = "Lnet/minecraft/entity/Entity;readCustomDataFromNbt(Lnet/minecraft/nbt/NbtCompound;)V"))
    void readInvulnerableTypesFromNbt(NbtCompound nbt, CallbackInfo ci){
        if (nbt.contains(InvulnerableToNbtTag, NbtElement.LIST_TYPE)){
            invulnerableTypes.clear();
            var nbtList = nbt.getList(InvulnerableToNbtTag, NbtElement.STRING_TYPE);
            for (int i = 0; i < nbtList.size(); ++i){
                invulnerableTypes.add(nbtList.getString(i));
            }
        }
    }

    @Inject(method="isInvulnerableTo", at=@At(value="RETURN"), cancellable = true)
    void isInvulnerableToEx(DamageSource damageSource, CallbackInfoReturnable<Boolean> cir){
        cir.setReturnValue(cir.getReturnValue() || invulnerableTypes.contains(damageSource.getName()));
    }
}
